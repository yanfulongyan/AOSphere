//
// Generated file, do not edit! Created by nedtool 5.4 from Optical.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __OPTICAL_M_H
#define __OPTICAL_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
 
#include "pkt_m.h"
#include <list>
typedef pkt * pkt_Ptr;
typedef std::list<pkt *> PktVector;

 
// }}

/**
 * Class generated from <tt>Optical.msg:44</tt> by nedtool.
 * <pre>
 * packet Optical
 * {
 *     //pkt_Ptr  pkt1;
 *     pkt_Ptr pkt1;
 *     pkt_Ptr pkt2;
 *     pkt_Ptr pkt3;
 *     pkt_Ptr pkt4;
 *     pkt_Ptr pkt5;
 *     pkt_Ptr pkt6;
 *     pkt_Ptr pkt7;
 *     pkt_Ptr pkt8;
 *     pkt_Ptr pkt9;
 *     pkt_Ptr pkt10;
 * 
 *     pkt_Ptr pkt11;
 *     pkt_Ptr pkt12;
 *     pkt_Ptr pkt13;
 *     pkt_Ptr pkt14;
 *     pkt_Ptr pkt15;
 *     pkt_Ptr pkt16;
 *     pkt_Ptr pkt17;
 *     pkt_Ptr pkt18;
 *     pkt_Ptr pkt19;
 *     pkt_Ptr pkt20;
 * 
 * 
 *     pkt_Ptr pkt21;
 *     pkt_Ptr pkt22;
 *     pkt_Ptr pkt23;
 *     pkt_Ptr pkt24;
 *     pkt_Ptr pkt25;
 *     //pkt  pkt1;
 *     //pkt  pkt2;
 *     //pkt  pkt3;
 *     //pkt  pkt4;
 *     //pkt  pkt5;
 * 
 *     int PreviousToR;
 *     int NextToR;
 *     int TxIndex;
 *     int GroupToRIndex;
 *     int optical_num;
 *     int index;
 *     PktVector Optical_pkts;
 *     int app_pkt_num;
 * }
 * </pre>
 */
class Optical : public ::omnetpp::cPacket
{
  protected:
    pkt_Ptr pkt1;
    pkt_Ptr pkt2;
    pkt_Ptr pkt3;
    pkt_Ptr pkt4;
    pkt_Ptr pkt5;
    pkt_Ptr pkt6;
    pkt_Ptr pkt7;
    pkt_Ptr pkt8;
    pkt_Ptr pkt9;
    pkt_Ptr pkt10;
    pkt_Ptr pkt11;
    pkt_Ptr pkt12;
    pkt_Ptr pkt13;
    pkt_Ptr pkt14;
    pkt_Ptr pkt15;
    pkt_Ptr pkt16;
    pkt_Ptr pkt17;
    pkt_Ptr pkt18;
    pkt_Ptr pkt19;
    pkt_Ptr pkt20;
    pkt_Ptr pkt21;
    pkt_Ptr pkt22;
    pkt_Ptr pkt23;
    pkt_Ptr pkt24;
    pkt_Ptr pkt25;
    int PreviousToR;
    int NextToR;
    int TxIndex;
    int GroupToRIndex;
    int optical_num;
    int index;
    PktVector Optical_pkts;
    int app_pkt_num;

  private:
    void copy(const Optical& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Optical&);

  public:
    Optical(const char *name=nullptr, short kind=0);
    Optical(const Optical& other);
    virtual ~Optical();
    Optical& operator=(const Optical& other);
    virtual Optical *dup() const override {return new Optical(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual pkt_Ptr& getPkt1();
    virtual const pkt_Ptr& getPkt1() const {return const_cast<Optical*>(this)->getPkt1();}
    virtual void setPkt1(const pkt_Ptr& pkt1);
    virtual pkt_Ptr& getPkt2();
    virtual const pkt_Ptr& getPkt2() const {return const_cast<Optical*>(this)->getPkt2();}
    virtual void setPkt2(const pkt_Ptr& pkt2);
    virtual pkt_Ptr& getPkt3();
    virtual const pkt_Ptr& getPkt3() const {return const_cast<Optical*>(this)->getPkt3();}
    virtual void setPkt3(const pkt_Ptr& pkt3);
    virtual pkt_Ptr& getPkt4();
    virtual const pkt_Ptr& getPkt4() const {return const_cast<Optical*>(this)->getPkt4();}
    virtual void setPkt4(const pkt_Ptr& pkt4);
    virtual pkt_Ptr& getPkt5();
    virtual const pkt_Ptr& getPkt5() const {return const_cast<Optical*>(this)->getPkt5();}
    virtual void setPkt5(const pkt_Ptr& pkt5);
    virtual pkt_Ptr& getPkt6();
    virtual const pkt_Ptr& getPkt6() const {return const_cast<Optical*>(this)->getPkt6();}
    virtual void setPkt6(const pkt_Ptr& pkt6);
    virtual pkt_Ptr& getPkt7();
    virtual const pkt_Ptr& getPkt7() const {return const_cast<Optical*>(this)->getPkt7();}
    virtual void setPkt7(const pkt_Ptr& pkt7);
    virtual pkt_Ptr& getPkt8();
    virtual const pkt_Ptr& getPkt8() const {return const_cast<Optical*>(this)->getPkt8();}
    virtual void setPkt8(const pkt_Ptr& pkt8);
    virtual pkt_Ptr& getPkt9();
    virtual const pkt_Ptr& getPkt9() const {return const_cast<Optical*>(this)->getPkt9();}
    virtual void setPkt9(const pkt_Ptr& pkt9);
    virtual pkt_Ptr& getPkt10();
    virtual const pkt_Ptr& getPkt10() const {return const_cast<Optical*>(this)->getPkt10();}
    virtual void setPkt10(const pkt_Ptr& pkt10);
    virtual pkt_Ptr& getPkt11();
    virtual const pkt_Ptr& getPkt11() const {return const_cast<Optical*>(this)->getPkt11();}
    virtual void setPkt11(const pkt_Ptr& pkt11);
    virtual pkt_Ptr& getPkt12();
    virtual const pkt_Ptr& getPkt12() const {return const_cast<Optical*>(this)->getPkt12();}
    virtual void setPkt12(const pkt_Ptr& pkt12);
    virtual pkt_Ptr& getPkt13();
    virtual const pkt_Ptr& getPkt13() const {return const_cast<Optical*>(this)->getPkt13();}
    virtual void setPkt13(const pkt_Ptr& pkt13);
    virtual pkt_Ptr& getPkt14();
    virtual const pkt_Ptr& getPkt14() const {return const_cast<Optical*>(this)->getPkt14();}
    virtual void setPkt14(const pkt_Ptr& pkt14);
    virtual pkt_Ptr& getPkt15();
    virtual const pkt_Ptr& getPkt15() const {return const_cast<Optical*>(this)->getPkt15();}
    virtual void setPkt15(const pkt_Ptr& pkt15);
    virtual pkt_Ptr& getPkt16();
    virtual const pkt_Ptr& getPkt16() const {return const_cast<Optical*>(this)->getPkt16();}
    virtual void setPkt16(const pkt_Ptr& pkt16);
    virtual pkt_Ptr& getPkt17();
    virtual const pkt_Ptr& getPkt17() const {return const_cast<Optical*>(this)->getPkt17();}
    virtual void setPkt17(const pkt_Ptr& pkt17);
    virtual pkt_Ptr& getPkt18();
    virtual const pkt_Ptr& getPkt18() const {return const_cast<Optical*>(this)->getPkt18();}
    virtual void setPkt18(const pkt_Ptr& pkt18);
    virtual pkt_Ptr& getPkt19();
    virtual const pkt_Ptr& getPkt19() const {return const_cast<Optical*>(this)->getPkt19();}
    virtual void setPkt19(const pkt_Ptr& pkt19);
    virtual pkt_Ptr& getPkt20();
    virtual const pkt_Ptr& getPkt20() const {return const_cast<Optical*>(this)->getPkt20();}
    virtual void setPkt20(const pkt_Ptr& pkt20);
    virtual pkt_Ptr& getPkt21();
    virtual const pkt_Ptr& getPkt21() const {return const_cast<Optical*>(this)->getPkt21();}
    virtual void setPkt21(const pkt_Ptr& pkt21);
    virtual pkt_Ptr& getPkt22();
    virtual const pkt_Ptr& getPkt22() const {return const_cast<Optical*>(this)->getPkt22();}
    virtual void setPkt22(const pkt_Ptr& pkt22);
    virtual pkt_Ptr& getPkt23();
    virtual const pkt_Ptr& getPkt23() const {return const_cast<Optical*>(this)->getPkt23();}
    virtual void setPkt23(const pkt_Ptr& pkt23);
    virtual pkt_Ptr& getPkt24();
    virtual const pkt_Ptr& getPkt24() const {return const_cast<Optical*>(this)->getPkt24();}
    virtual void setPkt24(const pkt_Ptr& pkt24);
    virtual pkt_Ptr& getPkt25();
    virtual const pkt_Ptr& getPkt25() const {return const_cast<Optical*>(this)->getPkt25();}
    virtual void setPkt25(const pkt_Ptr& pkt25);
    virtual int getPreviousToR() const;
    virtual void setPreviousToR(int PreviousToR);
    virtual int getNextToR() const;
    virtual void setNextToR(int NextToR);
    virtual int getTxIndex() const;
    virtual void setTxIndex(int TxIndex);
    virtual int getGroupToRIndex() const;
    virtual void setGroupToRIndex(int GroupToRIndex);
    virtual int getOptical_num() const;
    virtual void setOptical_num(int optical_num);
    virtual int getIndex() const;
    virtual void setIndex(int index);
    virtual PktVector& getOptical_pkts();
    virtual const PktVector& getOptical_pkts() const {return const_cast<Optical*>(this)->getOptical_pkts();}
    virtual void setOptical_pkts(const PktVector& Optical_pkts);
    virtual int getApp_pkt_num() const;
    virtual void setApp_pkt_num(int app_pkt_num);
    virtual void insertMessage(pkt *msg);
    virtual void removeMessage(pkt *msg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Optical& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Optical& obj) {obj.parsimUnpack(b);}


#endif // ifndef __OPTICAL_M_H

